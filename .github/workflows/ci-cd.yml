name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE: fdc2
  DOCKERHUB_USERNAME: cwfowers
  NODE_VERSION: '22'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Install system dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev python3-setuptools

    - name: Set up Python for node-gyp
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Debug npm and node versions
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "NPM config: $(npm config list)"

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        # Try npm install first (more permissive), then npm ci if successful
        npm install --verbose --legacy-peer-deps || (npm cache clean --force && npm install --verbose --legacy-peer-deps --no-optional)
      env:
        SQLITE3_BINARY_HOST_MIRROR: https://registry.npmmirror.com/-/binary/sqlite3/
        NPM_CONFIG_LOGLEVEL: verbose
        # Force platform-specific binaries to install correctly
        NPM_CONFIG_TARGET_PLATFORM: linux
        NPM_CONFIG_TARGET_ARCH: x64

    - name: Install SQLite3 fallback (if needed)
      if: failure()
      run: |
        echo "Standard install failed, trying SQLite3 rebuild..."
        npm install sqlite3 --build-from-source
        
    - name: Rebuild native dependencies (if needed)
      if: failure()
      run: |
        echo "Rebuilding all native dependencies..."
        npm rebuild
        # Specifically handle rollup binaries
        npm install @rollup/rollup-linux-x64-gnu --save-dev || echo "Rollup binary install failed, continuing..."

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:run

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-files
        path: dist/
        retention-days: 1

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Fire Direction Calculator
          org.opencontainers.image.description=PWA-ready React mortar fire direction calculator with offline capability
          org.opencontainers.image.vendor=FDC2
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        build-args: |
          NODE_ENV=production

    - name: Update Docker Hub description
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
        readme-filepath: ./DOCKER_DEPLOYMENT.md

  security-scan:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-notification:
    needs: [docker, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Deployment Success Notification
      run: |
        echo "üéØ Fire Direction Calculator deployed successfully!"
        echo "üê≥ Docker image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest"
        echo "üìä Image digest: ${{ needs.docker.outputs.image-digest }}"
        echo "üè∑Ô∏è  Tags: ${{ needs.docker.outputs.image-tags }}"
